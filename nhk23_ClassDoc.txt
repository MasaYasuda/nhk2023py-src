def calc_vector(x,y):
  """
  座標,回転から単位円のベクトルを求める。
  ※ x,yそれぞれ0.1以下のとき0と処理する。

  Parameters
  ---------
  x : float
    -1~1で示される移動のx座標 
  y : float
    -1~1で示される移動のy座標 

  Returns
  ---------
  r : float
    0~1 で示される半径
  theta : float
    弧度法(°)で示される偏角0~360°
  """
 
class SingleDrive:
  """
  単一モーター回転量計算

  Parameters
  ----------
  __DIAMETER :
  __GEAR_RATIO :
    最終的なタイヤの回転量と観測エンコーダーの回転量の比
    ( = エンコーダーの回転量/タイヤ1回転 )
  __MAX_VELOCITY : 

  speed_radicon : float
  speed : float

  """

  def __init__(self):
  def speed_radicon(self,power):
    """
    Parameters
    -----------
    power : float
     -1~1で示される回転量の大きさ

    """
  def speed(self,power):

class 4_OmniDrive:
  """
  4輪オムニ制御用モーター回転量計算
  
  Parameters
  -----------------
  __DIAMETER : float
  __DIAGONAL : float
  __GEAR_RATIO : int
    最終的なタイヤの回転量と観測エンコーダーの回転量の比
  __MAX_MOVE : float
  __MAX_ROT : float

  speed_radicon :list [float]
  speed : list[float]

  """

  def __init__(self): 
  def speed_radicon(self,move,rot):
  def speed(self,move,rot):

class DiffDrive:
  """
  差動二輪制御用モーター回転量計算

  Parameters
  ----------
  __DIAMETER :
  __DISTANCE :
  __GEAR_RATIO :
    最終的なタイヤの回転量と観測エンコーダーの回転量の比
  __MAX_MOVE : 
  __MAX_ROT :

  speed_radicon :list [float]
  speed : list[float]

  """
  def __init__(self):
  def speed_radicon(self,move,rot):
  def speed(self,move,rot):
  
  
class Transmitter (serial.Serial):
  """
  
  Parameters
  -------------
  __PORT : 
  __BAUDRATE : 

  __ADDR_MOTOR : int
  __ADDR_MODE : int
  __ADDR_DIRECTION_CONFIG : int
  __ADDR_FORWARD_LEVEL : int

  """
  def __init__(self, port, baudrate):
  def __write_single(self,addr_direct,value):
  def __write_all(self,addr,value):
    """

    Parameters
    ----------
    addr : int
     書き込むアドレス (1つ目)
    value : list[float]
     各値
    """
  def write_motor_single(self,num,value):
  def write_motor_all(self,value):


class Dynamixel:
  def __init__(self,port,baudrate,id,min_position,max_position):
  def enable_torque(self):
  def disable_torque(self):
  def write_position(self,value):
  def read_position(self): 
  def close_port(self):