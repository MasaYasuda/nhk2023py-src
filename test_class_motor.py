
class Motor:
  '''
  HOW TO USE Motor class
  
  ########## For 4 omni wheels ##########
  
  motor=nhk23.Motor("omni") # make instance
  motor.omni_setup(diamiter,diagonal,max_move,max_rot,max_wheel_speed,gear_ratio)
  output = motor.calc_omni_output(move,rot)  # move,rot is "Vector.move","Vector.rot"
     
  ********
  diamiter: mm
  diagonal: mm
  max_move: m/s
  max_rot : rpm
  max_wheel_speed : rpm
  gear_ratio : [b1,b2,b3,b4] (signed) # if the encoder rotates faster than wheel -> b1,b2,b3,b4 >1
  
  output : [a1,a2,a3,a4] rpm # "output" is the target value for encoder
  
  # 4輪オムニ車体が時計回りに回転するとき全出力は正
  ********
  
  ########## For roller(single) ##########
  
  motor=nhk23.Motor("roller") # make instance
  motor.roller_setup(diamiter,max_spin,gear_ratio)
  output = motor.calc_roller_output(spin) # spin: -1~1 

  ********
  diamiter: mm
  max_spin : m/s
  gear_ratio : (signed) # if the encoder rotates faster than wheel -> b1,b2,b3,b4 >1
  
  output : rpm  # "output" is the target value for encoder
  ********
  
  '''
  def __init__(self,type): 
    
    if type == "omni":
      self.__wheel_diameter = 0 # mm
      self.__omni_diagonal = 0 # mm
      self.__max_move_speed = 0 # m/s
      self.__max_rot_speed = 0 # rpm
      self.__compress_rate =0.5 # 0~1
      self.__max_wheel_speed = 0 #rpm
      self.__omni_enc_gear_ratio = [1,1,1,1] #符号付き encoderのほうが早く(多く)回る:　ratio>1
      
      self.omni_move_speed = [0,0,0,0] # rpm
      self.omni_rot_speed = [0,0,0,0] # rpm
      self.omni_speed = [0,0,0,0] # rpm
      self.omni_enc_target =[0,0,0,0] #rpm
   
    elif type == "roller":
      self.__roller_diameter = 0 # mm
      self.__max_spin_speed = 0 # m/s
      self.__roller_enc_gear_ratio = 1 #符号付き
      
      self.roller_speed = 0 # rpm
      self.roller_enc_target = 0
    
  ## FOR 4 OMNI WHEELS ########################
  
  def omni_setup(self,diamiter,diagonal,max_move,max_rot,max_wheel_speed,gear_ratio):
    self.__wheel_diameter = diamiter
    self.__omni_diagonal = diagonal
    self.__max_move_speed = max_move
    self.__max_rot_speed = max_rot
    self.__max_wheel_speed = max_wheel_speed
    self.__omni_enc_gear_ratio = gear_ratio
    
  def calc_move_speed(self,move): # move: generated by Vector.move()
    for i in range(0,4):
      self.omni_move_speed[i]=self.__max_move_speed * move[i] *30000 / self.__wheel_diameter/ 2 /math.pi # N[rpm]=30*v[m/s]/(r[mm]*pi)
    return
  
  def calc_rot_speed(self,rot):
    for i in range(0,4):
      self.omni_rot_speed[i]=self.__max_rot_speed * rot[i]*self.__omni_diagonal/2 /self.__wheel_diameter/2 # v[m/s]=ω*r=ω'*r'
    return
  
  def compression_speed(self):
    check_ratio=1
    for i in range(0,4):
      self.omni_speed[i] = self.omni_move_speed[i] + self.omni_rot_speed[i]
      if self.omni_speed[i] > self.__max_wheel_speed:
        check_ratio = min[check_ratio , self.__max_wheel_speed/self.omni_speed[i] ]
    if check_ratio<1:
      for i in range(0,4):
        self.omni_speed[i] = check_ratio* (self.omni_move_speed[i] + self.omni_rot_speed[i])
    return
  
  def calc_omni_enc_target(self):
    for i in range(0,4):
      self.omni_enc_target[i] = self.__omni_enc_gear_ratio[i]*self.omni_speed[i]
    return
  
  def calc_omni_output(self,move,rot):
    self.calc_move_speed(move)
    self.calc_rot_speed(rot)
    self.compression_speed()
    self.calc_omni_enc_target()
    return self.omni_enc_target
  
  
  

vector=Vector()
move,rot = vector.calc_vector(0.8,0.8,0) 
print(move)
print(rot)

[0.7071067811865475, 0.7071067811865475, -0.7071067811865475, -0.7071067811865475]
[0, 0, 0, 0]

[0.0, 1.0, 0.0, -1.0]
[0, 0, 0, 0]
